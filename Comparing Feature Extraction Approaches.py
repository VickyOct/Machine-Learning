# -*- coding: utf-8 -*-
"""786_group.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SSJtHoYhsN1vig2rC5eGXk6fdf_NOzTH
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

#Import file
df_train = pd.read_csv('/content/train.csv')
df_train.head()

y = df_train["price_range"].values

x = df_train
del x["price_range"]

x.head()

print(x.shape)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)

print(x_train.shape)
print(x_test.shape)

from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
X_train = sc.fit_transform(x_train)
X_test = sc.transform(x_test)
pca = PCA(n_components = 6)
X_train = pca.fit_transform(x_train)
X_test = pca.transform(x_test)
print(pca.components_)

print(pca.explained_variance_)

import time
from datetime import timedelta
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB
start_time = time.time()
classifier = GaussianNB()
classifier.fit(X_train, y_train)
end_time = time.time()
print("Traning time used:", end_time - start_time)

start_time = time.time()
y_pred = classifier.predict(X_test)
end_time = time.time()
print("Testing time used:", end_time - start_time)

from sklearn import metrics
from sklearn.metrics import f1_score
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
accu = metrics.accuracy_score(y_pred,y_test)
print("Accuracy of Gaussian Naive Bayes (NB):", accu)
fs = f1_score(y_test, y_pred,average = 'macro')
print("F1 score for Gaussian Naive Bayes (NB):",fs)
print("CM for test set with PCA +  Gaussian Naive Bayes (NB): ")
disp.plot()
plt.show()
print('\n')

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import f1_score
import time


start_time = time.time()
classifier =  KNeighborsClassifier(n_neighbors= 5)
classifier.fit(X_train, y_train)
end_time = time.time()
print("Training time used:", end_time - start_time)

start_time = time.time()
y_pred = classifier.predict(X_test)
end_time = time.time()
print("Testing time used:",  end_time - start_time)

cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
accu_knn = metrics.accuracy_score(y_pred,y_test)
print("Accuracy of KNN:", accu_knn)
fs_knn = f1_score(y_test, y_pred,average = 'macro')
print("F1 score for KNN:",fs_knn)
print("CM for test set with PCA + KNeighborsClassifier: ")
disp.plot()
plt.show()

from sklearn.feature_selection import SequentialFeatureSelector
from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=5)
sfs = SequentialFeatureSelector(knn, n_features_to_select=6)
sfs.fit(x_train, y_train)
sfs.get_support()
sfs.transform(x_train).shape

x_train.columns[[sfs.get_support()]]

selected_features = x_train.columns[[sfs.get_support()]]

print(selected_features)

df2 = x_train[['battery_power', 'blue', 'clock_speed', 'px_height', 'px_width', 'ram']].copy()
df2.head()

df2_test = x_test[['battery_power', 'blue', 'clock_speed', 'px_height', 'px_width', 'ram']].copy()
df2_test.head()

start_time = time.time()
classifier =  KNeighborsClassifier(n_neighbors= 5)
classifier.fit(df2, y_train)
end_time = time.time()
print("Training time used:", end_time - start_time)
start_time = time.time()
y_pred = classifier.predict(df2_test)
end_time = time.time()
print("Testing time used:", end_time - start_time)

cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
accu_knn = metrics.accuracy_score(y_pred,y_test)
print("Accuracy of KNN:", accu_knn)
fs_knn = f1_score(y_test, y_pred,average = 'macro')
print("F1 score for KNN:",fs_knn)
print("CM for test set with Feature Selection + KNeighborsClassifier: ")
disp.plot()
plt.show()

start_time = time.time()
classifier = GaussianNB()
classifier.fit(df2, y_train)
end_time = time.time()
print("Training time used:", end_time - start_time)

start_time = time.time()
y_pred = classifier.predict(df2_test)
end_time = time.time()
print("Test time used:", end_time - start_time)


cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
accu = metrics.accuracy_score(y_pred,y_test)
print("Accuracy of Gaussian Naive Bayes (NB):", accu)
fs = f1_score(y_test, y_pred,average = 'macro')
print("F1 score for Gaussian Naive Bayes (NB):",fs)
print("CM for test set with Feature Selection +  Gaussian Naive Bayes (NB): ")
disp.plot()
plt.show()
print('\n')